# -*- coding: utf-8 -*-
"""PRL_TASK_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qy-dqsw6kIGk2g23165C4LSuOpkMcB5H

### Mount Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""### Reading Dataset & Candidate Image"""

import cv2 as cv

# dataset = cv.imread("/content/drive/MyDrive/Dataset/Dataset_PRL/Numbers_Template.png")
# candidate = cv.imread("/content/drive/MyDrive/Dataset/Dataset_PRL/Numbers_9.png")
dataset = cv.imread("/content/drive/MyDrive/Dataset/Dataset_PRL/Vowels_Template.png")
candidate = cv.imread("/content/drive/MyDrive/Dataset/Dataset_PRL/Vowels_9.png")

from google.colab.patches import cv2_imshow

cv2_imshow(dataset)

cv2_imshow(candidate)

print(dataset.shape)
print(candidate.shape)

"""### Defining Size of Dataset"""

n = 11;

"""### Defining Height & Weight of Images"""

m = 50
dataset_height = m
candidate_height = dataset_height
dataset_weight = n * m
candidate_weight = m

"""### Resizing Images

"""

candidate_rs = cv.resize(candidate, dsize=(candidate_weight, candidate_height))
dataset_rs = cv.resize(dataset, dsize=(dataset_weight, dataset_height))

print(dataset_rs.shape)
print(candidate_rs.shape)

cv2_imshow(dataset_rs)

cv2_imshow(candidate_rs)

"""### Converting RGB Images to Grayscale"""

dataset_gray = cv.cvtColor(dataset_rs, cv.COLOR_BGR2GRAY)
candidate_gray = cv.cvtColor(candidate_rs, cv.COLOR_BGR2GRAY)

cv2_imshow(dataset_gray)

cv2_imshow(candidate_gray)

print(dataset_gray.shape)
print(candidate_gray.shape)

"""### Computing a Global Threshold Value from Grayscale Image(Using Otsu's Method) & Converting to Binary Image

"""

ret2, dataset_threshold = cv.threshold(
    dataset_gray, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU
)
ret1, candidate_threshold = cv.threshold(
    candidate_gray, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU
)

dataset_bw = dataset_threshold
candidate_bw = candidate_threshold

cv2_imshow(dataset_bw)

cv2_imshow(candidate_bw)

"""### Computing Correlation Coefficient between Candidate & Each Image of Dataset

"""

j = 0
all_cc = []
for i in range(0, n):
    Image = dataset_bw[
        0:candidate_height, j : j + candidate_weight
    ]  # Cropping image one by one from dataset for template matching
    # cv2_imshow(Image)
    cc = cv.matchTemplate(
        candidate_bw, Image, cv.TM_CCORR_NORMED
    )  # Computing the correlation coefficient
    print(cc[0][0])
    all_cc.append(cc[0][0])
    j = j + 50;

print(all_cc)

"""### Checking for the Value and Index of the Highest Correlation Coefficient"""

value = max(all_cc)
index = all_cc.index(value)
print("Candidate Image Best Matched with ", index, " ( ", value, " )")

"""### Drawing a Boundary Box on the Dataset for Matched Candidate"""

dataset_marked = cv.rectangle(dataset_rs, (index * candidate_weight, 1), (index * candidate_weight + 50, 49), (0, 255, 0), 3)
print("Matched Template with Boundary Box:")
cv2_imshow(dataset_marked)